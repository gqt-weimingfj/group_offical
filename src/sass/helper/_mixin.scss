/// Adds a browser prefix to the property
/// @param {*} $property Property
/// @param {*} $value Value
@mixin css3-prefix($property, $value) {
    -webkit-#{$property}: #{$value};
    #{$property}: #{$value};
}

/// Background Gradient
/// @param {Color} $startColor [#3C3C3C] - Start Color
/// @param {Color} $endColor [#999999] - End Color
@mixin background-gradient($startColor: #3C3C3C, $endColor: #999999) {
    background-color: $startColor;
    background-image: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));
    background-image: -webkit-linear-gradient(top, $startColor, $endColor);
    background-image: linear-gradient(top, $startColor, $endColor);
}

/// Background Size
/// @param {Size} $width [100%] - Width
/// @param {Size} $width [$width] - Height
/// @require {mixin} css3-prefix
@mixin background-size($width: 100%, $height: $width) {
    @if type-of($width)=='number' and $height !=null {
        @include css3-prefix('background-size', $width $height);
    }
    @else {
        @include css3-prefix('background-size', $width);
    }
}

/// Background Color Opacity
/// @param {Color} $color [100%] - Color
/// @param {Double} $opacity [0.85] - Opacity
@mixin background-opacity($color: #000, $opacity: 0.85) {
    background: $color;
    background: rgba($color, $opacity);
}

//透明
/// Opacity
/// @param {Double} $opacity [0.5] - Opacity
/// @require {mixin} css3-prefix
@mixin opacity($opacity: 0.5) {
    $opacityMultiplied: ($opacity * 100);
    filter: alpha(opacity=$opacityMultiplied);
    @include css3-prefix('opacity', $opacity);
}

/// Box Shadow
/// @param {Size} $x [2px] - X
/// @param {Size} $y [2px] - Y
/// @param {Size} $blur [5px] - Blur
/// @param {Color} $color [rgba(0,0,0,.4)] - Color
/// @param {Boolean} $inset - Inset
@mixin box-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0, 0, 0, .4), $inset: "") {
    @if ($inset !="") {
        @include css3-prefix('box-shadow', $inset $x $y $blur $color);
    }
    @else {
        @include css3-prefix('box-shadow', $x $y $blur $color);
    }
}

/// Border Radius
/// @param {Size} $radius [5px] - Radius
/// @require {mixin} css3-prefix
@mixin border-radius($radius: 5px) {
    @include css3-prefix('border-radius', $radius);
}

// Border Radius Separate
/// @param {Size} $topLeftRadius [5px] - Top Left
/// @param {Size} $topRightRadius [5px] - Top Right
/// @param {Size} $bottomLeftRadius [5px] - Bottom Left
/// @param {Size} $bottomRightRadius [5px] - Bottom Right
@mixin border-radius-separate($topLeftRadius: 5px, $topRightRadius: 5px, $bottomLeftRadius: 5px, $bottomRightRadius: 5px) {
    -webkit-border-top-left-radius: $topLeftRadius;
    -webkit-border-top-right-radius: $topRightRadius;
    -webkit-border-bottom-right-radius: $bottomRightRadius;
    -webkit-border-bottom-left-radius: $bottomLeftRadius;
    border-top-left-radius: $topLeftRadius;
    border-top-right-radius: $topRightRadius;
    border-bottom-right-radius: $bottomRightRadius;
    border-bottom-left-radius: $bottomLeftRadius;
}

/// Box Sizing
/// @param {*} $type [border-box] - Type
/// @require {mixin} css3-prefix
@mixin box-sizing($type: border-box) {
    @include css3-prefix('box-sizing', $type);
}

/// Font Face
/// @param {Font} $fontFamily [myFont] - Font Family
/// @param {String} $eotFileSrc ['myFont.eot'] - Eot File Source
/// @param {String} $woffFileSrc ['myFont.woff'] - Woff File Source
/// @param {String} $ttfFileSrc ['myFont.ttf'] - Ttf File Source
/// @param {String} $svgFileSrc ['myFont.svg'] - Svg File Source
@mixin font-face($fontFamily: myFont, $eotFileSrc: 'myFont.eot', $woffFileSrc: 'myFont.woff', $ttfFileSrc: 'myFont.ttf', $svgFileSrc: 'myFont.svg', $svgFontID: '#myFont') {
    font-family: $fontFamily;
    src: url($eotFileSrc) format('eot'), url($woffFileSrc) format('woff'), url($ttfFileSrc) format('truetype'), url($svgFileSrc + $svgFontID) format('svg');
}

/// Resize
/// @param {*} $directoin [both] - Direction
/// @require {mixin} css3-prefix
@mixin resize($direction: both) {
    @include css3-prefix('resize', $direction);
}

/// Transform
/// @param {List} $params - Params
/// @require {mixin} css3-prefix
@mixin transform($params) {
    @include css3-prefix('transform', $params);
}

/// Transform-Origin
/// @param {List} $params - Params
/// @require {mixin} css3-prefix
@mixin transform-origin($params) {
    @include css3-prefix('transform-origin', $params);
}

// Transform-Style
/// @param {List} $params - Params
/// @require {mixin} css3-prefix
@mixin transform-style($style: preserve-3d) {
    @include css3-prefix('transform-style', $style);
}

/// Transition
/// @param {List} $properties - Properties
/// @require {mixin} css3-prefix
@mixin transition($properties...) {
    @if length($properties)>=1 {
        @include css3-prefix('transition', $properties);
    }
    @else {
        @include css3-prefix('transition', "all 0.2s ease-in-out 0s");
    }
}

/// Keyframes
/// @param {*} $animation-name - Animation name
/// @content [Animation css]
@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
    @include css3-prefix('animation', $str);
}

// Preserve3D
@mixin preserve3d() {
    -webkit-transform-style: preserve-3d;
    transform-style: preserve-3d;
}

//flexbox
@mixin flexbox() {
    display: -webkit-box;
    display: -webkit-flex;
    display: flex !important;
}

@mixin flex($values) {
    -webkit-box-flex: $values;
    -webkit-flex: $values;
    flex: $values;
}

@mixin order($val) {
    -webkit-box-ordinal-group: $val;
    -webkit-order: $val;
    order: $val;
}

//$fw : wrap / nowarp
@mixin flex-wrap($fw) {
    -webkit-flex-wrap: $fw;
    flex-wrap: $fw;
}

//$fs:1
@mixin flex-shrink($fs) {
    -webkit-flex-shrink: $fs;
    flex-shrink: $fs;
}

//$jc :  flex-start | flex-end | center | space-between | space-around;
@mixin justify-content($jc) {
    -webkit-box-pack: $jc;
    -webkit-justify-content: $jc;
    justify-content: $jc;
}

//$ai : flex-start | flex-end | center | baseline | stretch;
@mixin align-items($ai) {
    -webkit-box-align: $ai;
    -webkit-align-items: $ai;
    align-items: $ai;
}

//$ai : flex-start | flex-end | center | space-between | space-around | stretch;
@mixin align-content($ai) {
    -webkit-align-content: $ai;
    align-content: $ai;
}

//$as : auto | flex-start | flex-end | center | baseline | stretch;
@mixin align-self($as) {
    -webkit-align-self: $as;
    align-self: $as;
}

@mixin ell() {
    overflow: hidden;
    -webkit-text-overflow: ellipsis;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin dib() {
    display: inline-block;
    *display: inline;
    *zoom: 1;
}

//
@mixin clearfix {
    &:after {
        clear: both;
        content: ' ';
        display: block;
        height: 0;
        line-height: 0;
        overflow: hidden;
    }
    *height: 1%;
}

// minheight
@mixin minHeight($min-height) {
    min-height: $min-height;
    height: auto !important;
    height: $min-height;
}

//箭头arrow(direction,size,color);
@mixin arrow($direction, $size, $color) {
    content: "";
    width: 0;
    height: 0;
    line-height: 0;
    font-size: 0;
    overflow: hidden;
    border-width: $size;
    cursor: pointer;
    @if $direction==top {
        border-style: dashed dashed solid dashed;
        border-color: transparent transparent $color transparent;
        border-top: none;
    }
    @else if $direction==bottom {
        border-style: solid dashed dashed dashed;
        border-color: $color transparent transparent transparent;
        border-bottom: none;
    }
    @else if $direction==right {
        border-style: dashed dashed dashed solid;
        border-color: transparent transparent transparent $color;
        border-right: none;
    }
    @else if $direction==left {
        border-style: dashed solid dashed dashed;
        border-color: transparent $color transparent transparent;
        border-left: none;
    }
}

@mixin square($px) {
    width: $px;
    height: $px;
}

//height
@mixin height($px) {
    height: $px;
    line-height: $px;
}

@mixin hidden ($extend:true) {
    @if $extend {
        @extend %hidden;
    }
    @else {
        display: none !important;
        visibility: hidden;
    }
}

%hidden {
    @include hidden(false);
}

@mixin scrollable() {
    overflow: auto;
    -webkit-overflow-scrolling: touch;
}

//居中
@mixin center-block {
    margin: 0 auto;
}

//border
@mixin border-tb($width:1px, $color:$color-split) {
    border-top: $width solid $color;
    border-bottom: $width solid $color;
}

//省略行数
@mixin line-clamp($line) {
    -webkit-line-clamp: $line;
    line-clamp: $line;
}

//1px
@mixin border-1px($color) {
    content: " ";
    position: absolute;
    left: 0;
    top: 0;
    right: 0;
    height: 1px;
    border-top: 1px solid $color;
    color: $color;
    -webkit-transform-origin: 0 0;
    transform-origin: 0 0;
    -webkit-transform: scaleY(.5);
    transform: scaleY(.5);
}